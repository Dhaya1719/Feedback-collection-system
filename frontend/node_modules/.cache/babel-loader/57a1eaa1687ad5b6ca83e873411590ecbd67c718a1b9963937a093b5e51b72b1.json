{"ast":null,"code":"var _jsxFileName = \"E:\\\\murugesan\\\\Downloads\\\\nm pro\\\\Feedback-collection-system\\\\frontend\\\\src\\\\components\\\\FeedbackForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedbackForm() {\n  _s();\n  const {\n    formId\n  } = useParams();\n  const [form, setForm] = useState(null);\n  const [formData, setFormData] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Fetch the specific form structure from the backend\n    axios.get(`http://localhost:5000/api/forms/${formId}`).then(response => {\n      setForm(response.data);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching form:\", error);\n      setLoading(false);\n    });\n  }, [formId]);\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setFormData(prevData => {\n      // Handle Checkboxes (multiple selections)\n      if (type === 'checkbox') {\n        const currentArray = prevData[name] || [];\n        return {\n          ...prevData,\n          [name]: checked ? [...currentArray, value] // Add value if checked\n          : currentArray.filter(v => v !== value) // Remove value if unchecked\n        };\n      }\n\n      // Handle Text, Radio, Email, Name (single value inputs)\n      return {\n        ...prevData,\n        [name]: value\n      };\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Structure submission data for the backend API\n    try {\n      await axios.post(`http://localhost:5000/api/submissions/${formId}`, {\n        // Name and Email are sent at the top level\n        name: formData.name,\n        email: formData.email,\n        // All other responses are mapped by question ID\n        ...Object.keys(formData).reduce((acc, key) => {\n          // Filter out the 'name' and 'email' keys\n          if (key !== 'name' && key !== 'email') {\n            acc[key] = formData[key];\n          }\n          return acc;\n        }, {})\n      });\n      setSubmitted(true);\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n      alert('Submission failed. Please try again.');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: \"Loading form...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 23\n  }, this);\n  if (!form) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: \"Form not found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 21\n  }, this);\n  if (submitted) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Thank you for your feedback!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 64\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your response has been recorded.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 101\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: form.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: form.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"feedback-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), form.questions.map(q => {\n        // Use the question's MongoDB _id as the unique key for form data tracking\n        const questionKey = q._id.toString();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: q.questionText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), q.questionType === 'text' && /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: questionKey,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), q.questionType === 'rating' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options rating-input\",\n            children: [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: questionKey,\n                value: star,\n                onChange: handleChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: star\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 23\n              }, this)]\n            }, star, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), (q.questionType === 'radio' || q.questionType === 'checkbox') && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: q.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: q.questionType,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: q.questionType,\n                name: questionKey,\n                value: option,\n                onChange: handleChange,\n                required: q.questionType === 'radio' // Radio buttons are typically required\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: option\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 23\n              }, this)]\n            }, optIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)]\n        }, questionKey, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Submit Feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(FeedbackForm, \"GLKEYIMUigPDCbmSGGY1DP6CrsQ=\", false, function () {\n  return [useParams];\n});\n_c = FeedbackForm;\nexport default FeedbackForm;\nvar _c;\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","FeedbackForm","_s","formId","form","setForm","formData","setFormData","submitted","setSubmitted","loading","setLoading","get","then","response","data","catch","error","console","handleChange","e","name","value","type","checked","target","prevData","currentArray","filter","v","handleSubmit","preventDefault","post","email","Object","keys","reduce","acc","key","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","onSubmit","onChange","questions","map","q","questionKey","_id","toString","questionText","questionType","required","star","options","option","optIndex","_c","$RefreshReg$"],"sources":["E:/murugesan/Downloads/nm pro/Feedback-collection-system/frontend/src/components/FeedbackForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction FeedbackForm() {\r\n  const { formId } = useParams();\r\n  const [form, setForm] = useState(null);\r\n  const [formData, setFormData] = useState({});\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch the specific form structure from the backend\r\n    axios.get(`http://localhost:5000/api/forms/${formId}`)\r\n      .then(response => {\r\n        setForm(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching form:\", error);\r\n        setLoading(false);\r\n      });\r\n  }, [formId]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    \r\n    setFormData(prevData => {\r\n      // Handle Checkboxes (multiple selections)\r\n      if (type === 'checkbox') {\r\n        const currentArray = prevData[name] || [];\r\n        return {\r\n          ...prevData,\r\n          [name]: checked \r\n            ? [...currentArray, value] // Add value if checked\r\n            : currentArray.filter(v => v !== value) // Remove value if unchecked\r\n        };\r\n      }\r\n      \r\n      // Handle Text, Radio, Email, Name (single value inputs)\r\n      return { ...prevData, [name]: value };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Structure submission data for the backend API\r\n    try {\r\n      await axios.post(`http://localhost:5000/api/submissions/${formId}`, {\r\n          // Name and Email are sent at the top level\r\n          name: formData.name,\r\n          email: formData.email,\r\n          // All other responses are mapped by question ID\r\n          ...Object.keys(formData).reduce((acc, key) => {\r\n            // Filter out the 'name' and 'email' keys\r\n            if (key !== 'name' && key !== 'email') {\r\n              acc[key] = formData[key];\r\n            }\r\n            return acc;\r\n          }, {})\r\n      });\r\n      setSubmitted(true);\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      alert('Submission failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"container text-center\">Loading form...</div>;\r\n  if (!form) return <div className=\"container text-center\">Form not found.</div>;\r\n  if (submitted) return <div className=\"container text-center\"><h2>Thank you for your feedback!</h2><p>Your response has been recorded.</p></div>;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{form.title}</h2>\r\n      <p>{form.description}</p>\r\n      <form onSubmit={handleSubmit} className=\"feedback-form\">\r\n        \r\n        {/* Universal fields: Name and Email (uses fixed keys) */}\r\n        <div className=\"form-group\">\r\n          <label>Name (Optional)</label>\r\n          <input type=\"text\" name=\"name\" onChange={handleChange} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Email (Optional)</label>\r\n          <input type=\"email\" name=\"email\" onChange={handleChange} />\r\n        </div>\r\n\r\n        {/* Dynamic Questions Rendering */}\r\n        {form.questions.map((q) => {\r\n          // Use the question's MongoDB _id as the unique key for form data tracking\r\n          const questionKey = q._id.toString(); \r\n          return (\r\n            <div key={questionKey} className=\"form-group\">\r\n              <label>{q.questionText}</label>\r\n              \r\n              {/* Text Input */}\r\n              {q.questionType === 'text' && (\r\n                <textarea name={questionKey} onChange={handleChange} required />\r\n              )}\r\n              \r\n              {/* Rating (Radio 1-5) */}\r\n              {q.questionType === 'rating' && (\r\n                <div className=\"options rating-input\">\r\n                  {[1, 2, 3, 4, 5].map(star => (\r\n                    <label key={star}>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name={questionKey}\r\n                        value={star}\r\n                        onChange={handleChange}\r\n                        required\r\n                      /> \r\n                      {/* Using a span allows styling the text when the input is checked */}\r\n                      <span>{star}</span>\r\n                    </label>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              \r\n              {/* Radio (Multiple Choice) & Checkbox */}\r\n              {(q.questionType === 'radio' || q.questionType === 'checkbox') && (\r\n                <div className=\"options\">\r\n                  {q.options.map((option, optIndex) => (\r\n                    <label key={optIndex} className={q.questionType}>\r\n                      <input\r\n                        type={q.questionType}\r\n                        name={questionKey}\r\n                        value={option}\r\n                        onChange={handleChange}\r\n                        required={q.questionType === 'radio'} // Radio buttons are typically required\r\n                      /> \r\n                      {/* Using a span allows styling the text when the input is checked */}\r\n                      <span>{option}</span>\r\n                    </label>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n        <button type=\"submit\" className=\"btn btn-primary\">Submit Feedback</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FeedbackForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}